* Testing Ruby with RSpec

[[./ruby.jpg]]

* Why Test?

Why do we write tests?  To ...

 + Find the path to an implementation (a.k.a. Test Driven Development).

 + Document the behaviour of the code under test (hence 'specs').

 + Prevent regressions in the code.

 + Explore the behaviour of legacy code.

* Test Driven Development

 + Write tests first, make them pass, refactor.

 + Not a replacement for design thinking!

 + Keeps your design in a safe state that's easy to extend and refactor.

* Document Behaviour

 + Close in spirit to literate programming.

 + The prose is more important than the code.

 + RSpec even has a documentation mode.

* Legacy Code

 + Test ideas about how legacy code works.

 + Build up a suite of tests so you can safely refactor legacy code.

 + "My point of view is that legacy code is just code without tests."
     - Michael Feathers

* Why Not Test?

 + When you simply can't test reliably.

 + When you're just testing the framework ...
      ... sometimes

 + When you're spiking ...
      ... sometimes

* Mocking / Stubbing / Test Doubles / Faking

 + Replace a real implementation with a fake one.

 + You can focus on how the class under test behaves and interacts.

 + Avoid using slow, complex, unreliable or dangerous classes.

* Code Walkthrough

* Common Gotchas

 + Overusing mocks to write tests that mirror the implementation.

 + Neglecting to write integration specs.

 + Using fixed values where not strictly necessary.

* Cool Tools

 + factory_girl: Build test objects in pure Ruby.
   https://github.com/thoughtbot/factory_girl

 + Faker: Generate fake, random data for your specs.
   https://github.com/stympy/faker

 + Guard: Automatically run specs when things change.
   https://github.com/guard/guard

 + SimpleCov: How much of your code is tested?
   https://github.com/colszowka/simplecov

(parenthetical_rant - can we agree on a NamingConvention for ruby-libraries please?)

* Credits and Links

 + [[./greensync-logo-retina.png]]
   http://www.greensync.com.au/
   GreenSync - time to work on this presentation, and feedback on same.
   (Which included "don't use Emacs" ...)

 + https://github.com/rlister/org-present
   Use Emacs for presentations!

 + https://en.wikipedia.org/
   Photo of researchers w/ IBM 704.

 + https://goo.gl/N7LFk1
   "Artificial ruby hemisphere under a monochromatic light" by D.328 - Own work.
   Licensed under CC BY-SA 3.0 via Commons

 + https://github.com/duncan-bayne/presentations/tree/master/ruby-rspec
   This presentation.

* Q&A ...

[[./wat.jpg]]
